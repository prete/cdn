{"version":3,"sources":["Bucket.js","App.js","serviceWorker.js","index.js"],"names":["Bucket","Object","classCallCheck","this","_files","bucketRoot","name","key","type","share","concat","url","size","children","bucketUrl","window","location","protocol","hostname","port","pathname","console","log","document","currentScript","search","params","slice","split","map","p","reduce","obj","_ref","_ref2","slicedToArray","value","_objectSpread","defineProperty","shared","getContentes","bucketName","item","foo","getNodeValue","modified","parseInt","pop","extension","folders","path","length","folder","shift","ls","find","f","push","sort","sorter","tag","element","getElementsByTagName","childNodes","nodeValue","a","b","localeCompare","marker","request","XMLHttpRequest","open","send","status","DOMParser","parseFromString","responseText","data","contents","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","c","file","parseContents","startsWith","addTreeNode","err","return","replace","branch","_loop","fetchBucketData","getFilesFromXML","trimTree","App","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","bucket","seraching","tree","files","onRowClick","record","index","event","columns","title","dataIndex","width","render","searching","react_default","createElement","style","marginLeft","display","fontSize","substr","lastIndexOf","download","tooltip","es_button","icon","shape","onClick","handleDownload","bind","Group","handleShare","time","moment","fromNow","sizeElement","color","readableFileSize","setState","i","Math","floor","pow","toFixed","ext","iconName","themeName","fileIcon","expanded","theme","Modal","info","content","typography","Paragraph","code","copyable","text","onCopy","message","success","stopPropagation","preventDefault","searchResults","term","target","toLowerCase","filter","includes","_this2","Title","level","input","prefix","placeholder","onChange","handleSearch","table","pagination","expandIcon","folderExpandIcon","dataSource","onRow","expandRowByClick","React","Component","Boolean","match","mount","querySelectorAll","ReactDOM","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.980d19cd.chunk.js","sourcesContent":["export default class Bucket {\n\n  // gets the contents from the bucket as a tree\n  get tree() {\n    return this.bucketRoot.children;\n  }\n\n  // gets the contents of the bucket as a tree but returns only the root node\n  get root(){\n    return this.bucketRoot;\n  }\n\n  // gets the files in the bucket\n  get files() {\n    return this._files;\n  }\n\n  get name(){\n    return this.bucketName;\n  }\n  \n  // make empty files and tree\n  _files = [];\n  bucketRoot = {\n    name: '',\n    key: '',\n    type: 'bucket',\n    share: `${this.url}`,\n    size: 0,\n    children: []\n  };\n\n  //get bucket URL from current location\n  bucketUrl = `${window.location.protocol}//${window.location.hostname}${window.location.port ? ':'+window.location.port : ''}`;  \n\n  // set base URL for the entry file (index.html)\n  url = `${this.bucketUrl}${window.location.pathname}`;\n  constructor(){\n    console.log('currentScript)', document.currentScript);\n\n    // get url from config if present\n    if (document.currentScript) { \n      //the idea is to get the configuration straight from the tag script\n      //i.e. <script src='http://some.place/build.js' config-var1=\"foo\" config-val2=\"bar\"></script>\n    }\n\n    // check querystring to see if this is a shared url\n    if(window.location.search){\n      this.params = window.location.search\n        .slice(1)\n        .split('&')\n        .map(p => p.split('='))\n        .reduce((obj, [key, value]) => ({ ...obj, [key]: value }), {});\n      \n      if('shared' in this.params){\n        this.shared = this.params.shared;\n      }\n    }\n    \n    // release thre kraken!\n    this.getContentes();\n  }\n\n  // parse <Contents> element to get file information\n  parseContents(item) {\n    var foo = {\n      key: this.getNodeValue(\"Key\", item),\n      modified: this.getNodeValue(\"LastModified\", item),\n      size: parseInt(this.getNodeValue(\"Size\", item))\n    };\n    foo.type = \"file\";\n    foo.name = foo.key.split(\"/\").pop();\n    foo.extension = foo.name.split(\".\").pop();\n    foo.url = `${this.bucketUrl}/${foo.key}`;\n    foo.share = foo.url;\n    return foo;\n  }\n\n  // add node to bucket tree\n  // the tree builds from the bucketRoot\n  addTreeNode(item) {\n    var folders = item.key.split(\"/\");\n    folders.pop(); // remove file name\n    var path = this.bucketRoot;\n    while (folders.length !== 0) {\n      var folder = folders.shift();\n      // eslint-disable-next-line\n      var ls = path.children.find( f=> f.name === folder);\n      if (!ls) {\n        ls = {\n          name: folder,\n          type: \"folder\",\n          size: 0,\n          key: `${path.key}${folder}/`,\n          children: []\n        };\n        ls.share = `${this.url}?shared=${ls.key}`;\n        path.children.push(ls);\n        path.children.sort(this.sorter);\n      }\n      ls.size += item.size;\n      path = ls;\n    }\n    \n    path.children.push(item);\n    path.children.sort(this.sorter);\n    this.bucketRoot.size += item.size;\n  }\n\n  // helper to get the node value from an element\n  getNodeValue(tag, element) {\n    return element.getElementsByTagName(tag)[0].childNodes[0].nodeValue;\n  }\n\n  // sort function to sort folders first and then files\n  sorter(a, b) {\n    if (a.type === b.type) {\n      return a.name.localeCompare(b.name);\n    } else {\n      return a.type === \"folder\" ? -1 : 1;\n    }\n  }\n\n  // fetch xml data from the bucket\n  fetchBucketData(marker){\n    var url = this.bucketUrl;\n    if(marker){\n      url = `${this.bucketUrl}/?marker=${marker}`;\n    }\n    var request = new XMLHttpRequest();\n    request.open('GET', url, false);\n    request.send(null);\n    if (request.status === 200) {\n      return (new window.DOMParser()).parseFromString(request.responseText, \"text/xml\");\n    }\n  }\n\n  // read the XML and get the Contents (files)\n  // fitler the files if this is from a shared link\n  getFilesFromXML(data){\n    var contents = data.getElementsByTagName(\"Contents\");\n    for(let c of contents){\n      let file = this.parseContents(c);\n      if(!this.shared || file.key.startsWith(this.shared)){\n        //add file to list\n        this._files.push(file);\n        // might be better to sort everthing afterwards?\n        this._files.sort(this.sorter);\n        //add file as leaf to the tree\n        this.addTreeNode(file);\n      }\n    }\n  }\n\n  // remove previous folders up to the shared one\n  trimTree(){\n    let path = this.shared.replace(/^\\/|\\/$/g, '').split('/');\n    let branch = this.bucketRoot.children;\n    while(path.length>0){\n      let name = path.shift()\n      let item = branch.find(c => c.name === name);\n      if(!item) break;\n      branch = item.children;\n    }\n    this.bucketRoot.children = branch;\n  }\n\n  //fetch xml the bucket and parse it to get the files\n  getContentes() {\n    // get the data\n    var data = this.fetchBucketData();\n    console.log('Data',data);\n\n    //get bucket name\n    this.bucketName = this.getNodeValue('Name', data);\n    this.bucketRoot.name = this.bucketName;\n\n    // build files from xml\n    this.getFilesFromXML(data);\n\n    // get all the chunks, repeat while IsTruncated is true\n    // requests after the first one are made using NextMarker node value\n    while(this.getNodeValue('IsTruncated', data) === 'true'){\n      var marker = this.getNodeValue('NextMarker', data);\n      data = this.fetchBucketData(marker);\n      this.getFilesFromXML(data);\n    };\n\n    // if shared link remove parent folders\n    if(this.shared){\n      // this could be done so much better \n      this.trimTree();\n    }\n  }\n}","import React from \"react\";\nimport \"antd/dist/antd.css\";\nimport Bucket from \"./Bucket\"\nimport { Typography, message, Modal, Table, Tag, Button, Icon, Input, Tooltip} from \"antd\";\nimport moment from \"moment\";\n\nclass App extends React.Component {\n  //do I even need to use the whole state-thing?\n  state = {\n    bucket: {},\n    seraching: false,\n    tree: [],\n    files: [],\n    data: []\n  };\n\n  constructor(props) {\n    super(props);\n  }\n\n  //when the component is mounted\n  //get the bucket\n  componentDidMount() {\n    let bucket = new Bucket();\n  \n    this.setState({\n      bucket: bucket,\n      tree: bucket.tree,\n      files: bucket.files,\n      data: bucket.tree\n    });\n  }\n\n  //bytes to human readable\n  //src: https://stackoverflow.com/questions/20459630/javascript-human-readable-filesize\n  readableFileSize(size) {\n    if (size === 0) return \"0.00 B\";\n    var i = Math.floor(Math.log(size) / Math.log(1024));\n    return (\n      (size / Math.pow(1024, i)).toFixed(2) * 1 +\n      \" \" +\n      [\"B\", \"kB\", \"MB\", \"GB\", \"TB\"][i]\n    );\n  }\n\n  onRowClick = (record, index, event) => {\n    console.log(\"Row click\", { record: record, index: index, event: event });\n  };\n\n  columns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\",\n      width: \"50%\",\n      render: (name, record, index) => {\n        if(this.state.searching){\n          return (\n            <div style={{marginLeft: '5px', display: 'block'}}>\n              <span>{name}</span><br/>\n              <span style={{fontSize: '10px'}}>{record.key.substr(0, record.key.lastIndexOf('/'))}</span>\n            </div>)\n        }else{\n          return <span style={{marginLeft: '5px'}}>{name}</span>;            \n        }\n      }\n    },\n    {\n      title: \"Actions\",\n      key: \"actions\",\n      width: \"10%\",\n      render: (key, record, index) => {\n        let download = (\n          <Tooltip title={`Download this ${record.type}: ${record.name}`}>\n            <Button icon=\"download\" shape=\"round\" onClick={this.handleDownload.bind(null, record)}/>\n          </Tooltip>\n        );\n        return (\n          <Button.Group size=\"small\">\n            <Tooltip title={`Share this ${record.type}: ${record.name}`}>\n              <Button icon=\"link\" shape=\"round\" onClick={this.handleShare.bind(null, record)}/>\n            </Tooltip>\n            {record.type === \"file\" ? download : \"\"}\n          </Button.Group>\n        );\n      }\n    },\n    {\n      title: \"Last Modified\",\n      dataIndex: \"modified\",\n      key: \"modified\",\n      width: \"20%\",\n      render: (time, record, index) => {\n        if (time) {\n          return (\n            <div>\n              <Tag>{moment(time).fromNow()}</Tag>\n              <br />\n              <small>{time}</small>\n            </div>\n          );\n        } else {\n          return \"\";\n        }\n      }\n    },\n    {\n      title: \"Size\",\n      dataIndex: \"size\",\n      key: \"size\",\n      width: \"20%\",\n      render: (size, record, index) => {\n        let sizeElement;\n        if (size) {\n          let color = record.type === \"file\" ? \"geekblue\" : \"\";\n          sizeElement = (\n            <Tag color={color} size=\"small\">\n              {this.readableFileSize(size)}\n            </Tag>\n          );\n        } else {\n          sizeElement = <span />;\n        }\n        return sizeElement;\n      }\n    }\n  ];\n\n  fileIcon(ext) {\n    let iconName;\n    switch (ext) {\n      case \"pdf\":\n        iconName = \"file-pdf\";\n        break;\n      case \"tar\":\n      case \"zip\":\n      case \"gz\":\n        iconName = \"file-zip\";\n        break;\n      case \"png\":\n      case \"jpg\":\n      case \"jpge\":\n      case \"tiff\":\n      case \"bmp\":\n        iconName = \"file-image\";\n        break;\n      default:\n        iconName = \"file-text\";\n        break;\n    }\n    return iconName;\n  }\n\n  //use different folder and file icons\n  folderExpandIcon(props) {\n    let iconName;\n    let themeName=\"\";\n    if (props.record.type === \"file\") {\n      iconName = this.fileIcon(props.record.extension);\n    } else if (props.expanded) {\n      iconName = \"folder-open\";\n      themeName = \"filled\";\n    } else {\n      iconName = \"folder\";\n      themeName = \"filled\";\n    }\n    return (<Icon type={iconName} style={{ fontSize: '18px'}} theme={themeName}/>  );\n    \n  }\n\n  //opens up the modal to show the user the shareable link\n  handleShare(record, event){\n    Modal.info({\n      title: `Share this ${record.type} with others`,\n      content: (\n        <div>\n          <span>Copy the following link:</span>\n          <Typography.Paragraph code copyable={{text: record.share, onCopy: f =>(message.success('Link copied!'))}}>{record.share}</Typography.Paragraph>\n        </div>\n      )\n    });\n    \n    event.stopPropagation();\n  }\n\n  //opens a new window with the full S3 file URL\n  handleDownload(record, event){\n    window.open(record.url);\n    event.preventDefault();\n  }\n\n  //search function\n  async handleSearch(event) {\n    var searchResults = [];\n    var term = event.target.value.toLowerCase();\n    if (term && term.length >= 3) {\n      this.setState({searching:true});\n      searchResults = this.state.files.filter(f =>\n        f.name.toLowerCase().includes(term)\n      );\n    } else {\n      this.setState({searching:false});\n      searchResults = this.state.tree;\n    }\n    this.setState({data: searchResults });\n  }\n\n  render() {\n    return (\n      <div>\n        <Typography.Title level={3}>Browsing: {this.state.bucket.name}/{this.state.bucket.shared}</Typography.Title>\n        <Tooltip title=\"Search for file. Input at least 3 characaters.\">\n          <Input\n            prefix={<Icon type=\"file-search\" />}\n            placeholder=\"Search...\"\n            onChange={this.handleSearch.bind(this)}\n          />\n        </Tooltip>\n        <Table\n          size=\"medium\"\n          pagination={false}\n          expandIcon={this.folderExpandIcon.bind(this)}\n          columns={this.columns}\n          dataSource={this.state.data}\n          onRow={(record, index) => ({\n            onClick: this.onRowClick.bind(null, record, index)\n          })}\n          expandRowByClick\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst mount = document.querySelectorAll('div.mount-s3-tree')\nReactDOM.render(\n  <App />,\n  mount[0]\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}