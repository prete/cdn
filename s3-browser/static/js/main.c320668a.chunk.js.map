{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","bucket","key","type","url","concat","window","location","protocol","hostname","port","children","state","files","data","seraching","fetching","browserUrl","pathname","prefix","onRowClick","record","index","event","console","log","columns","title","dataIndex","width","render","name","searching","react_default","a","createElement","style","marginLeft","display","fontSize","substr","lastIndexOf","download","tooltip","es_button","icon","shape","onClick","handleDownload","bind","Group","size","handleShare","time","tag","moment","fromNow","sizeElement","color","readableFileSize","search","params","slice","split","map","p","reduce","obj","_ref","_ref2","slicedToArray","value","_objectSpread","defineProperty","shared","_this2","getAsync","then","setupBucket","getNodeValue","share","document","processFolder","options","request","marker","setState","push","join","fetch","text","DOMParser","parseFromString","error","_context2","t0","folder","_this3","_folder$children","getFilesFromXML","apply","toConsumableArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","getFoldersFromXML","Symbol","iterator","next","done","childFolder","err","return","sort","sorter","contents","getElementsByTagName","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","c","parseContents","_state$files","len","folders","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","parseCommonPrefixes","element","childNodes","nodeValue","item","file","modified","parseInt","pop","extension","replace","b","localeCompare","newItem","collection","i","length","otherItem","splice","Math","floor","pow","toFixed","ext","iconName","themeName","fileIcon","expanded","theme","Modal","info","content","typography","Paragraph","code","copyable","onCopy","f","message","success","stopPropagation","open","preventDefault","term","target","toLowerCase","filter","includes","_this4","Title","level","input","placeholder","onChange","handleSearch","isFetching","table","pagination","expandIcon","folderExpandIcon","dataSource","onRow","loading","expandRowByClick","React","Component","Boolean","match","mount","querySelectorAll","ReactDOM","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"06BAwaeA,cA5Yb,SAAAA,EAAYC,GAAO,IAAAC,EAIjB,GAJiBC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KApBRQ,OAAS,CACPC,IAAK,GACLC,KAAM,SACNC,IAAG,GAAAC,OAAKC,OAAOC,SAASC,SAArB,MAAAH,OAAkCC,OAAOC,SAASE,UAAlDJ,OAA6DC,OAAOC,SAASG,KAAO,IAAIJ,OAAOC,SAASG,KAAO,IAClHC,SAAS,IAeQjB,EAXnBkB,MAAQ,CACNC,MAAO,GACPC,KAAM,GACNC,WAAW,EACXC,UAAU,GAOOtB,EAJnBuB,WAImB,GAAAZ,OAJHX,EAAKO,OAAOG,KAITC,OAJeC,OAAOC,SAASW,UAI/BxB,EAFnByB,OAAS,GAEUzB,EA2MnB0B,WAAa,SAACC,EAAQC,EAAOC,GAC3BC,QAAQC,IAAI,YAAa,CAAEJ,OAAQA,EAAQC,MAAOA,EAAOC,MAAOA,KA5M/C7B,EA+MnBgC,QAAU,CACR,CACEC,MAAO,OACPC,UAAW,OACX1B,IAAK,OACL2B,MAAO,MACPC,OAAQ,SAACC,EAAMV,EAAQC,GACrB,OAAG5B,EAAKkB,MAAMoB,UAEVC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,WAAY,MAAOC,QAAS,UACvCL,EAAAC,EAAAC,cAAA,YAAOJ,GAAYE,EAAAC,EAAAC,cAAA,WACnBF,EAAAC,EAAAC,cAAA,QAAMC,MAAO,CAACG,SAAU,SAAUlB,EAAOnB,IAAIsC,OAAO,EAAGnB,EAAOnB,IAAIuC,YAAY,QAG3ER,EAAAC,EAAAC,cAAA,QAAMC,MAAO,CAACC,WAAY,QAASN,KAIhD,CACEJ,MAAO,UACPzB,IAAK,UACL2B,MAAO,MACPC,OAAQ,SAAC5B,EAAKmB,EAAQC,GACpB,IAAIoB,EACFT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAShB,MAAK,iBAAAtB,OAAmBgB,EAAOlB,KAA1B,MAAAE,OAAmCgB,EAAOU,OACtDE,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAQC,KAAK,WAAWC,MAAM,QAAQC,QAASrD,EAAKsD,eAAeC,KAAK,KAAM5B,MAGlF,OACEY,EAAAC,EAAAC,cAACS,EAAA,EAAOM,MAAR,CAAcC,KAAK,SACjBlB,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAShB,MAAK,cAAAtB,OAAgBgB,EAAOlB,KAAvB,MAAAE,OAAgCgB,EAAOU,OACnDE,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAQC,KAAK,OAAOC,MAAM,QAAQC,QAASrD,EAAK0D,YAAYH,KAAK,KAAM5B,MAExD,SAAhBA,EAAOlB,KAAkBuC,EAAW,MAK7C,CACEf,MAAO,gBACPC,UAAW,WACX1B,IAAK,WACL2B,MAAO,MACPC,OAAQ,SAACuB,EAAMhC,EAAQC,GACrB,OAAI+B,EAEApB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KAAMC,IAAOF,GAAMG,WACnBvB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,aAAQkB,IAIL,KAIb,CACE1B,MAAO,OACPC,UAAW,OACX1B,IAAK,OACL2B,MAAO,MACPC,OAAQ,SAACqB,EAAM9B,EAAQC,GACrB,IAAImC,EACJ,GAAIN,EAAM,CACR,IAAIO,EAAwB,SAAhBrC,EAAOlB,KAAkB,WAAa,GAClDsD,EACExB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAKI,MAAOA,EAAOP,KAAK,SACrBzD,EAAKiE,iBAAiBR,SAI3BM,EAAcxB,EAAAC,EAAAC,cAAA,aAEhB,OAAOsB,KArRRnD,OAAOC,SAASqD,OAAO,CACxB,IAAIC,EAASvD,OAAOC,SAASqD,OAC1BE,MAAM,GACNC,MAAM,KACNC,IAAI,SAAAC,GAAC,OAAIA,EAAEF,MAAM,OACjBG,OAAO,SAACC,EAADC,GAAA,IAAAC,EAAA1E,OAAA2E,EAAA,EAAA3E,CAAAyE,EAAA,GAAOlE,EAAPmE,EAAA,GAAYE,EAAZF,EAAA,UAAAG,EAAA,GAA6BL,EAA7BxE,OAAA8E,EAAA,EAAA9E,CAAA,GAAmCO,EAAMqE,KAAU,IAC1D,WAAYV,IACbnE,EAAKO,OAAOC,IAAM2D,EAAOa,QAXZ,OAAAhF,mFAiBC,IAAAiF,EAAA9E,KAClB2B,QAAQC,IAAI,qBACZD,QAAQC,IAAI5B,KAAKsB,QAEjBtB,KAAK+E,SAAS,CAACzD,OAAQtB,KAAKI,OAAOC,MAAM2E,KAAK,SAAA/D,GAC5C6D,EAAKG,YAAYhE,yCAITA,GAEVjB,KAAKI,OAALuE,EAAA,GACK3E,KAAKI,OADV,CAEE8B,KAAMlC,KAAKkF,aAAa,OAAQjE,GAChCkE,MAAK,GAAA3E,OAAKR,KAAKoB,cAIjBX,OAAO2E,SAAStD,MAAQrB,OAAO2E,SAAStD,MAAQ,IAAM9B,KAAKI,OAAO8B,KAClElC,KAAKqF,cAAcrF,KAAKI,iFAGXkF,2FACItF,KAAKuF,QAAQD,UAA1BrE,mBAC6C,SAA3CjB,KAAKkF,aAAa,cAAejE,2BACjCuE,EAASxF,KAAKkF,aAAa,aAAcjE,QAC7CA,WAAcjB,KAAKuF,QAAQ,CACzBjE,OAAQgE,EAAQhE,OAChBkE,OAAQA,WAFVvE,6CAKFjB,KAAKyF,SAAS,SAAA1E,GAEZ,OADAA,EAAMI,UAAW,EACVJ,sBAEFE,+KAIKqE,sFACZA,EAAOX,EAAA,GAAOW,IACNhE,OAAS,WAAYgE,EAAUA,EAAQhE,OAAS,GAExDK,QAAQC,IAAI,kBAAmB0D,IAE3BtB,EAAS,IACN0B,KAAP,eACA1B,EAAO0B,KAAP,UAAAlF,OAAsB8E,EAAQhE,SAC3BgE,EAAQE,QACTxB,EAAO0B,KAAP,UAAAlF,OAAsB8E,EAAQE,kBAIxBjF,EAAMP,KAAKI,OAAOG,IAAK,IAAIyD,EAAO2B,KAAK,eACvBC,MAAMrF,kBAAtBgF,mBACaA,EAAQM,sBAArBA,4BACE,IAAIpF,OAAOqF,WAAaC,gBAAgBF,EAAM,wEAG/ClE,QAAQqE,MAARC,EAAAC,wJAKGC,GAAO,IAAAC,EAAApG,KACnBA,KAAK+E,SAAS,CAACzD,OAAQ6E,EAAO9F,MAAM2E,KAAK,SAAA/D,GAAO,IAAAoF,EAE1CrF,EAAQoF,EAAKE,gBAAgBrF,IAEjCoF,EAAAF,EAAOrF,UAAS4E,KAAhBa,MAAAF,EAAAvG,OAAA0G,EAAA,EAAA1G,CAAwBkB,IAJsB,IAAAyF,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAM9C,QAAAC,EAAAC,EAAuBV,EAAKW,kBAAkB9F,GAA9C+F,OAAAC,cAAAR,GAAAI,EAAAC,EAAAI,QAAAC,MAAAV,GAAA,EAAoD,KAA5CW,EAA4CP,EAAAnC,MAElDyB,EAAOrF,SAAS4E,KAAK0B,GACrBhB,EAAKf,cAAc+B,IATyB,MAAAC,GAAAX,GAAA,EAAAC,EAAAU,EAAA,YAAAZ,GAAA,MAAAK,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAZ,EAAA,MAAAC,GAW9CR,EAAOrF,SAASyG,KAAKnB,EAAKoB,QAE1BpB,EAAKX,SAAS,SAAA1E,GAEZ,OADAA,EAAME,KAAOmF,EAAKhG,OAAOU,SAClBC,8CAOGE,GACd,IAAIwG,EAAWxG,EAAKyG,qBAAqB,YACrC1G,EAAQ,GAFO2G,GAAA,EAAAC,GAAA,EAAAC,OAAAjB,EAAA,IAGnB,QAAAkB,EAAAC,EAAaN,EAAbT,OAAAC,cAAAU,GAAAG,EAAAC,EAAAb,QAAAC,MAAAQ,GAAA,EAAsB,KAAdK,EAAcF,EAAApD,MAEpB1D,EAAM0E,KAAK1F,KAAKiI,cAAcD,KALb,MAAAX,GAAAO,GAAA,EAAAC,EAAAR,EAAA,YAAAM,GAAA,MAAAI,EAAAT,QAAAS,EAAAT,SAAA,WAAAM,EAAA,MAAAC,GAanB,OALA7H,KAAKyF,SAAS,SAAA1E,GAAQ,IAAAmH,EAGpB,OAFAA,EAAAnH,EAAMC,OAAM0E,KAAZa,MAAA2B,EAAoBlH,GACpBW,QAAQC,IAAI,cAAeb,EAAMC,MAAMmH,KAChCpH,IAEFC,4CAKSC,GAChB,IAAIwG,EAAWxG,EAAKyG,qBAAqB,kBACrCU,EAAU,GAFOC,GAAA,EAAAC,GAAA,EAAAC,OAAA3B,EAAA,IAGrB,QAAA4B,EAAAC,EAAahB,EAAbT,OAAAC,cAAAoB,GAAAG,EAAAC,EAAAvB,QAAAC,MAAAkB,GAAA,EAAsB,KAAdL,EAAcQ,EAAA9D,MACpB0D,EAAQ1C,KAAK1F,KAAK0I,oBAAoBV,KAJnB,MAAAX,GAAAiB,GAAA,EAAAC,EAAAlB,EAAA,YAAAgB,GAAA,MAAAI,EAAAnB,QAAAmB,EAAAnB,SAAA,WAAAgB,EAAA,MAAAC,GAMrB,OAAOH,uCAII3E,EAAKkF,GAChB,OAAOA,EAAQjB,qBAAqBjE,GAAK,GAAGmF,WAAW,GAAGC,gDAI9CC,GACZ,IAAIC,EAAO,CACT1I,IAAKL,KAAKkF,aAAa,MAAO4D,GAC9BE,SAAUhJ,KAAKkF,aAAa,eAAgB4D,GAC5CxF,KAAM2F,SAASjJ,KAAKkF,aAAa,OAAQ4D,IACzCxI,KAAM,QAOR,OALAyI,EAAK7G,KAAO6G,EAAK1I,IAAI6D,MAAM,KAAKgF,MAChCH,EAAKI,UAAYJ,EAAK7G,KAAKgC,MAAM,KAAKgF,MACtCH,EAAKxI,IAAL,GAAAC,OAAcR,KAAKI,OAAOG,IAA1B,KAAAC,OAAiCuI,EAAK1I,KACtC0I,EAAK5D,MAAQ4D,EAAKxI,IAEXwI,8CAIWD,GAClB,IAAI3C,EAAS,CACX7F,KAAM,SACNgD,KAAM,EACNjD,IAAKL,KAAKkF,aAAa,SAAU4D,GACjChI,SAAU,IAKZ,OAHAqF,EAAOjE,KAAOiE,EAAO9F,IAAI+I,QAAQ,MAAM,IAAIlF,MAAM,KAAKgF,MACtD/C,EAAOhB,MAAP,GAAA3E,OAAkBR,KAAKoB,WAAvB,YAAAZ,OAA4C2F,EAAO9F,KAE5C8F,iCAGF9D,EAAGgH,GACR,OAAIhH,EAAE/B,OAAS+I,EAAE/I,KACR+B,EAAEH,KAAKoH,cAAcD,EAAEnH,MAEZ,WAAXG,EAAE/B,MAAqB,EAAI,wCAIxBiJ,EAASC,GACrB7H,QAAQC,IAAI2H,EAASC,GACrB,IAAK,IAAIC,EAAI,EAAGtB,EAAMqB,EAAWE,OAAQD,EAAItB,EAAKsB,IAAK,CACrD,IAAIE,EAAYH,EAAWC,GAC3B,GAAKF,EAAQjJ,OAASqJ,EAAUrJ,MAAUiJ,EAAQrH,KAAKoH,cAAcK,EAAUzH,MAAM,EAAI,CACvFsH,EAAWI,OAAOH,EAAG,EAAGF,GACxB,MACK,GAAoB,WAAjBA,EAAQjJ,KAAkB,CAChCkJ,EAAWI,OAAOH,EAAG,EAAGF,GAC1B,iDAUWjG,GACf,GAAa,IAATA,EAAY,MAAO,SACvB,IAAImG,EAAII,KAAKC,MAAMD,KAAKjI,IAAI0B,GAAQuG,KAAKjI,IAAI,OAC7C,OAC0C,GAAvC0B,EAAOuG,KAAKE,IAAI,KAAMN,IAAIO,QAAQ,GACnC,IACA,CAAC,IAAK,KAAM,KAAM,KAAM,MAAMP,oCAuFzBQ,GACP,IAAIC,EACJ,OAAQD,GACN,IAAK,MACHC,EAAW,WACX,MACF,IAAK,MACL,IAAK,MACL,IAAK,KACHA,EAAW,WACX,MACF,IAAK,MACL,IAAK,MACL,IAAK,OACL,IAAK,OACL,IAAK,MACHA,EAAW,aACX,MACF,QACEA,EAAW,YAGf,OAAOA,2CAIQtK,GACf,IAAIsK,EACAC,EAAU,GAUd,MAT0B,SAAtBvK,EAAM4B,OAAOlB,KACf4J,EAAWlK,KAAKoK,SAASxK,EAAM4B,OAAO2H,WAC7BvJ,EAAMyK,UACfH,EAAW,cACXC,EAAY,WAEZD,EAAW,SACXC,EAAY,UAEN/H,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAM1C,KAAM4J,EAAU3H,MAAO,CAAEG,SAAU,QAAS4H,MAAOH,wCAKvD3I,EAAQE,GAClB6I,IAAMC,KAAK,CACT1I,MAAK,cAAAtB,OAAgBgB,EAAOlB,KAAvB,gBACLmK,QACErI,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAACoI,EAAA,EAAWC,UAAZ,CAAsBC,MAAI,EAACC,SAAU,CAAChF,KAAMrE,EAAO2D,MAAO2F,OAAQ,SAAAC,GAAC,OAAIC,IAAQC,QAAQ,mBAAoBzJ,EAAO2D,UAKxHzD,EAAMwJ,yDAIO1J,EAAQE,GACrBjB,OAAO0K,KAAK3J,EAAOjB,KACnBmB,EAAM0J,8FAIW1J,6EACbT,EAAOjB,KAAKe,MAAMX,OAAOU,SACzBqB,GAAY,GACZkJ,EAAO3J,EAAM4J,OAAO5G,MAAM6G,gBAClBF,EAAK3B,QAAU,IACzBvH,GAAY,EACZlB,EAAOjB,KAAKe,MAAMC,MAAMwK,OAAO,SAAAT,GAAC,OAC9BA,EAAE7I,KAAKqJ,cAAcE,SAASJ,MAGlCrL,KAAKyF,SAAS,SAAA1E,GAGZ,OAFAA,EAAMoB,UAAYA,EAClBpB,EAAME,KAAOA,EACNF,wIAIF,IAAA2K,EAAA1L,KACP,OACEoC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACoI,EAAA,EAAWiB,MAAZ,CAAkBC,MAAO,GAAzB,aAAuC5L,KAAKI,OAAO8B,KAAnD,IAA0DlC,KAAKI,OAAOyE,QACtEzC,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAShB,MAAM,kDACbM,EAAAC,EAAAC,cAACuJ,EAAA,EAAD,CACEvK,OAAQc,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAM1C,KAAK,gBACnBwL,YAAY,YACZC,SAAU/L,KAAKgM,aAAa5I,KAAKpD,SAGrCoC,EAAAC,EAAAC,cAAA,SAAItC,KAAKe,MAAMkL,WAAa,oBAAsB,IAClD7J,EAAAC,EAAAC,cAAC4J,EAAA,EAAD,CACE5I,KAAK,SACL6I,YAAY,EACZC,WAAYpM,KAAKqM,iBAAiBjJ,KAAKpD,MACvC6B,QAAS7B,KAAK6B,QACdyK,WAAYtM,KAAKe,MAAME,KACvBsL,MAAO,SAAC/K,EAAQC,GAAT,MAAoB,CACzByB,QAASwI,EAAKnK,WAAW6B,KAAK,KAAM5B,EAAQC,KAE9C+K,QAASxM,KAAKe,MAAMI,SACpBsL,kBAAgB,YA3ZRC,IAAMC,WCMJC,QACW,cAA7BnM,OAAOC,SAASE,UAEe,UAA7BH,OAAOC,SAASE,UAEhBH,OAAOC,SAASE,SAASiM,MACvB,2DCbN,IAAMC,EAAQ1H,SAAS2H,iBAAiB,qBACxCC,IAAS/K,OACPG,EAAAC,EAAAC,cAAC2K,EAAD,MACAH,EAAM,IDyHF,kBAAmBI,WACrBA,UAAUC,cAAcC,MAAMpI,KAAK,SAAAqI,GACjCA,EAAaC","file":"static/js/main.c320668a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Typography, message, Modal, Table, Tag, Button, Icon, Input, Tooltip} from \"antd\";\nimport moment from \"moment\";\nimport SubMenu from \"antd/lib/menu/SubMenu\";\n\nclass App extends React.Component {\n  //index = {};\n\n  bucket = {\n    key: '',\n    type: 'bucket',\n    url: `${window.location.protocol}//${window.location.hostname}${window.location.port ? ':'+window.location.port : ''}`,\n    children:[]\n  };\n\n  //do I even need to use the whole state-thing?\n  state = {\n    files: [],\n    data: [],\n    seraching: false,\n    fetching: false\n  };\n\n  browserUrl = `${this.bucket.url}${window.location.pathname}`;\n\n  prefix = \"\";\n\n  constructor(props) {\n    super(props);\n  \n    // parse querystring to see if this is a shared link\n    if(window.location.search){\n      let params = window.location.search\n        .slice(1)\n        .split('&')\n        .map(p => p.split('='))\n        .reduce((obj, [key, value]) => ({ ...obj, [key]: value }), {});\n      if('shared' in params){\n        this.bucket.key = params.shared;\n      }\n    }\n  }\n\n  //when the component is mounted => go get bucket data\n  componentDidMount() {\n    console.log(\"ComponentDidMount\")\n    console.log(this.prefix);\n    // fetch base level files and fodlers\n    this.getAsync({prefix: this.bucket.key}).then(data =>{\n      this.setupBucket(data);\n    });\n  }\n\n  setupBucket(data){\n    // create the bucket structure\n    this.bucket = {\n      ...this.bucket,\n      name: this.getNodeValue('Name', data),\n      share: `${this.browserUrl}`,\n    };\n    \n    // set the window title with the bucket name\n    window.document.title = window.document.title + '|' + this.bucket.name;\n    this.processFolder(this.bucket);\n  }\n\n  async getAsync(options){\n    var data = await this.request(options);\n    while(this.getNodeValue('IsTruncated', data) === 'true'){\n      var marker = this.getNodeValue('NextMarker', data);\n      data += await this.request({\n        prefix: options.prefix, \n        marker: marker\n      });\n    };\n    this.setState(state => {\n      state.fetching = false;\n      return state;\n    })\n    return data;\n  }\n\n\n  async request(options){\n    options = {...options};\n    options.prefix = 'prefix' in options ? options.prefix : '';\n    \n    console.log(\"Request Options\", options);\n\n    let params = [];\n    params.push(`delimiter=/`);\n    params.push(`prefix=${options.prefix}`);\n    if(options.marker){\n      params.push(`marker=${options.marker}`);\n    }\n    \n    try {\n      const url = this.bucket.url +\"?\"+params.join(\"&\");\n      const request = await fetch(url);\n      const text = await request.text();\n      return (new window.DOMParser()).parseFromString(text, \"text/xml\");\n    }\n    catch (e) {\n      return console.error(e);\n    }\n  }\n\n  // get only folders and files inside given folder\n  processFolder(folder){\n    this.getAsync({prefix: folder.key}).then(data =>{\n      \n      let files = this.getFilesFromXML(data);      \n      //this.insertOrdered(...files, folder.children);\n      folder.children.push(...files);\n      //folder.size += files.reduce((total, file) => { return total + file.size;}, 0);\n      for(let childFolder of this.getFoldersFromXML(data)){\n        //this.insertOrdered(childFolder, folder.children);\n        folder.children.push(childFolder);\n        this.processFolder(childFolder);\n      }\n      folder.children.sort(this.sorter);\n\n      this.setState(state =>{\n        state.data = this.bucket.children;\n        return state;\n      });\n    });\n  }\n\n  // read the XML and get the Contents (files)\n  // fitler the files if this is from a shared link\n  getFilesFromXML(data){\n    var contents = data.getElementsByTagName(\"Contents\");\n    let files = [];\n    for(let c of contents){\n      //add file to list\n      files.push(this.parseContents(c));      \n      // might be better to sort everthing afterwards?\n    }\n    this.setState(state =>{\n      state.files.push(...files);\n      console.log(\"File count:\", state.files.len)\n      return state;\n    });\n    return files;\n  }\n\n  // read the XML and get the Contents (files)\n  // fitler the files if this is from a shared link\n  getFoldersFromXML(data){\n    var contents = data.getElementsByTagName(\"CommonPrefixes\");\n    let folders = []\n    for(let c of contents){\n      folders.push(this.parseCommonPrefixes(c));\n    }\n    return folders;\n  }\n\n  // helper to get the node value from an element\n  getNodeValue(tag, element) {\n    return element.getElementsByTagName(tag)[0].childNodes[0].nodeValue;\n  }\n\n  // parse <Contents> element to get file information\n  parseContents(item) {\n    var file = {\n      key: this.getNodeValue(\"Key\", item),\n      modified: this.getNodeValue(\"LastModified\", item),\n      size: parseInt(this.getNodeValue(\"Size\", item)),\n      type: \"file\"\n    };\n    file.name = file.key.split(\"/\").pop();\n    file.extension = file.name.split(\".\").pop();\n    file.url = `${this.bucket.url}/${file.key}`;\n    file.share = file.url;\n    //this.index[file.key] = file;\n    return file;\n  }\n\n  // parse <CommonPrefixes> element to get folder names\n  parseCommonPrefixes(item){\n    var folder = {\n      type: \"folder\",\n      size: 0,\n      key: this.getNodeValue(\"Prefix\", item),\n      children: []\n    }\n    folder.name = folder.key.replace(/\\/$/,\"\").split(\"/\").pop();\n    folder.share = `${this.browserUrl}?shared=${folder.key}`;\n    //this.index[folder.key] = folder;\n    return folder;\n  }\n\n  sorter(a, b) {\n    if (a.type === b.type) {\n      return a.name.localeCompare(b.name);\n    } else {\n      return a.type === \"folder\" ? -1 : 1;\n    }\n  }\n\n  insertOrdered(newItem, collection){\n    console.log(newItem, collection);\n    for (let i = 0, len = collection.length; i < len; i++) {\n      let otherItem = collection[i];\n      if ((newItem.type === otherItem.type) && (newItem.name.localeCompare(otherItem.name)<1)) {\n        collection.splice(i, 0, newItem);\n        break;\n      } else if(newItem.type === \"folder\"){\n          collection.splice(i, 0, newItem);\n        break;\n      }\n    }\n  }\n  \n  \n  /////////////////////////\n\n  //bytes to human readable\n  //src: https://stackoverflow.com/questions/20459630/javascript-human-readable-filesize\n  readableFileSize(size) {\n    if (size === 0) return \"0.00 B\";\n    var i = Math.floor(Math.log(size) / Math.log(1024));\n    return (\n      (size / Math.pow(1024, i)).toFixed(2) * 1 +\n      \" \" +\n      [\"B\", \"kB\", \"MB\", \"GB\", \"TB\"][i]\n    );\n  }\n\n  onRowClick = (record, index, event) => {\n    console.log(\"Row click\", { record: record, index: index, event: event });\n  };\n\n  columns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\",\n      width: \"50%\",\n      render: (name, record, index) => {\n        if(this.state.searching){\n          return (\n            <div style={{marginLeft: '5px', display: 'block'}}>\n              <span>{name}</span><br/>\n              <span style={{fontSize: '10px'}}>{record.key.substr(0, record.key.lastIndexOf('/'))}</span>\n            </div>)\n        }else{\n          return <span style={{marginLeft: '5px'}}>{name}</span>;            \n        }\n      }\n    },\n    {\n      title: \"Actions\",\n      key: \"actions\",\n      width: \"10%\",\n      render: (key, record, index) => {\n        let download = (\n          <Tooltip title={`Download this ${record.type}: ${record.name}`}>\n            <Button icon=\"download\" shape=\"round\" onClick={this.handleDownload.bind(null, record)}/>\n          </Tooltip>\n        );\n        return (\n          <Button.Group size=\"small\">\n            <Tooltip title={`Share this ${record.type}: ${record.name}`}>\n              <Button icon=\"link\" shape=\"round\" onClick={this.handleShare.bind(null, record)}/>\n            </Tooltip>\n            {record.type === \"file\" ? download : \"\"}\n          </Button.Group>\n        );\n      }\n    },\n    {\n      title: \"Last Modified\",\n      dataIndex: \"modified\",\n      key: \"modified\",\n      width: \"20%\",\n      render: (time, record, index) => {\n        if (time) {\n          return (\n            <div>\n              <Tag>{moment(time).fromNow()}</Tag>\n              <br />\n              <small>{time}</small>\n            </div>\n          );\n        } else {\n          return \"\";\n        }\n      }\n    },\n    {\n      title: \"Size\",\n      dataIndex: \"size\",\n      key: \"size\",\n      width: \"20%\",\n      render: (size, record, index) => {\n        let sizeElement;\n        if (size) {\n          let color = record.type === \"file\" ? \"geekblue\" : \"\";\n          sizeElement = (\n            <Tag color={color} size=\"small\">\n              {this.readableFileSize(size)}\n            </Tag>\n          );\n        } else {\n          sizeElement = <span />;\n        }\n        return sizeElement;\n      }\n    }\n  ];\n\n  fileIcon(ext) {\n    let iconName;\n    switch (ext) {\n      case \"pdf\":\n        iconName = \"file-pdf\";\n        break;\n      case \"tar\":\n      case \"zip\":\n      case \"gz\":\n        iconName = \"file-zip\";\n        break;\n      case \"png\":\n      case \"jpg\":\n      case \"jpge\":\n      case \"tiff\":\n      case \"bmp\":\n        iconName = \"file-image\";\n        break;\n      default:\n        iconName = \"file-text\";\n        break;\n    }\n    return iconName;\n  }\n\n  //use different folder and file icons\n  folderExpandIcon(props) {\n    let iconName;\n    let themeName=\"\";\n    if (props.record.type === \"file\") {\n      iconName = this.fileIcon(props.record.extension);\n    } else if (props.expanded) {\n      iconName = \"folder-open\";\n      themeName = \"filled\";\n    } else {\n      iconName = \"folder\";\n      themeName = \"filled\";\n    }\n    return (<Icon type={iconName} style={{ fontSize: '18px'}} theme={themeName}/>  );\n    \n  }\n\n  //opens up the modal to show the user the shareable link\n  handleShare(record, event){\n    Modal.info({\n      title: `Share this ${record.type} with others`,\n      content: (\n        <div>\n          <span>Copy the following link:</span>\n          <Typography.Paragraph code copyable={{text: record.share, onCopy: f =>(message.success('Link copied!'))}}>{record.share}</Typography.Paragraph>\n        </div>\n      )\n    });\n    \n    event.stopPropagation();\n  }\n\n  //opens a new window with the full S3 file URL\n  handleDownload(record, event){\n    window.open(record.url);\n    event.preventDefault();\n  }\n\n  //search function\n  async handleSearch(event) {\n    let data = this.state.bucket.children;\n    let searching = false;\n    var term = event.target.value.toLowerCase();\n    if (term && term.length >= 3) {\n      searching = true;\n      data = this.state.files.filter(f =>\n        f.name.toLowerCase().includes(term)\n      );\n    }\n    this.setState(state =>{\n      state.searching = searching;\n      state.data = data;\n      return state;\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Typography.Title level={3}>Browsing: {this.bucket.name}/{this.bucket.shared}</Typography.Title>\n        <Tooltip title=\"Search for file. Input at least 3 characaters.\">\n          <Input\n            prefix={<Icon type=\"file-search\" />}\n            placeholder=\"Search...\"\n            onChange={this.handleSearch.bind(this)}\n          />\n        </Tooltip>\n        <p>{this.state.isFetching ? 'Fetching files...' : ''}</p>\n        <Table\n          size=\"medium\"\n          pagination={false}\n          expandIcon={this.folderExpandIcon.bind(this)}\n          columns={this.columns}\n          dataSource={this.state.data}\n          onRow={(record, index) => ({\n            onClick: this.onRowClick.bind(null, record, index)\n          })}\n          loading={this.state.fetching}\n          expandRowByClick\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst mount = document.querySelectorAll('div.mount-s3-tree')\nReactDOM.render(\n  <App />,\n  mount[0]\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}